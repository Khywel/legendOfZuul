import java.util.*;
import java.awt.*;
import javax.swing.*;

/**
 * Class Item -
 * The item class is the parent class of the "Messages", "Food" and
 * "InvisibleObject" classes. An item is an object that can be used by the
 * player. An item is characterized by 3 attributes: a name to name the item,
 * a price to be bought or resold to a particular npc and a boolean to know if
 * the item can be sell.
 * This class is part of the "Legend of Zuul" .
 * @author  Luc AUDOUARD
 * @version 2018.11.14
 */

public class Item {
    private String itemName;
    protected int price;
    private boolean saleable;
    private boolean okItem;

    /**
     * Item constructor
     * @param itemName The name of the item. It can not be null.
     * @param price The price of the item. This variable tie in the buying
     * the resale price is equivalent to 50% of the purchase price. It can not
     * be null.
     * @param saleable If the item can be sell or not.
     */
    public Item (String itemName, int price, boolean saleable) {
        // variables initialisation
        this.itemName = itemName;
        if (price > 0){
            this.price = price;
        }
        else {
            System.out.println("Price error. The price is now equal to 0.");
            this.price = 0;
        }
        this.saleable = saleable;
        //checkPrice(this.price);
    }

    /**
    * Return the name of the item
    */
    public String getItemName (){
        return itemName;
    }

    /**
    * Return the price of the item
    */
    public int getPrice (){
        return price;
    }

    /**
    * Return true or false if the item can be sell or not
    */
    public boolean getSaleable (){
        return saleable;
    }

    /**
    * The price may vary over the game, overwrite the old price by a
    * new price. The new price can not negative
    */
    public void setPrice (int newPrice){
        if (newPrice > 0){
            System.out.println("Price error, it can not be under 0");
        }
        else price = newPrice;
    }
    
    /**public boolean checkPrice (int price){
        JFrame myFrame;
        JLabel labelNewPrice, labelOldPrice;
        JTextField myJTF;
        JButton myButton;
        JPanel myPanel;
        
        myPanel = new JPanel();
        labelNewPrice = new JLabel("Nouveau prix: ");
        labelOldPrice = new JLabel();
        labelOldPrice.setText("Ancien prix: "+price);
        myJTF = new JTextField("New value");
        myButton = new JButton("OK");
        myFrame = new JFrame("Test");
        
        myFrame.setPreferredSize(new Dimension(300,120));
        
        myPanel.add(labelOldPrice);
        myPanel.add(labelNewPrice);
        myPanel.add(myJTF);
        myPanel.add(myButton);
        myFrame.add(myPanel);
        centreWindow(myFrame);
        
        myFrame.pack();
        myFrame.setVisible(true);
        return true;
    }*/
    
    public static void centreWindow(JFrame frame) {
    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
    frame.setLocation(x, y);
    }
}
